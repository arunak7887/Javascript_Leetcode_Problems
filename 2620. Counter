Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).

Example 1:
Input: 
n = 10 
["call","call","call"]
Output: [10,11,12]
Explanation: 
counter() = 10 // The first time counter() is called, it returns n.
counter() = 11 // Returns 1 more than the previous time.
counter() = 12 // Returns 1 more than the previous time.

Example 2:
Input: 
n = -2
["call","call","call","call","call"]
Output: [-2,-1,0,1,2]
Explanation: counter() initially returns -2. Then increases after each sebsequent call.

Constraints:
-1000 <= n <= 1000
0 <= calls.length <= 1000
calls[i] === "call"


Code:

var createCounter=function(n){
  return ()=>n++
};

Explain:
  
var createCounter = function(n) { ... }: This line defines a function expression named createCounter. It takes a parameter n.

'return () => n++;': This line returns an arrow function. The arrow function has access to the n variable due to closure.

() => n++: This arrow function doesn't have any parameters. It simply returns the value of n and then increments n by 1 (n++). Because of the post-increment operator ++, the function returns the current value of n and then increments it. This way, subsequent calls to the function will return the incremented value of n.



